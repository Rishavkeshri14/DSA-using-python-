def get_pivot(arr, n):
    s = 0
    e = n - 1
    mid = s + (e - s) // 2

    while s < e:
        if arr[mid] >= arr[0]:
            s = mid + 1
        else:
            e = mid
        mid = s + (e - s) // 2

    return s

def binary_search(arr, s, e, key):
    start = s
    end = e
    mid = start + (end - start) // 2

    while start <= end:
        if arr[mid] == key:
            return mid

        if key > arr[mid]:
            start = mid + 1
        else:
            end = mid - 1

        mid = start + (end - start) // 2

    return -1

def find_position(arr, n, k):
    pivot = get_pivot(arr, n)
    
    if k >= arr[pivot] and k <= arr[n - 1]:
        return binary_search(arr, pivot, n - 1, k)
    else:
        return binary_search(arr, 0, pivot - 1, k)

# Example usage:
arr = [7, 9, 1, 2, 3]
n = len(arr)
k = 2
position = find_position(arr, n, k)
print("Position of", k, "is:", position)
